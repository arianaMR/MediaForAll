{
  "documentation": {
    "localization": {
      "c25Documentation": "For C25",
      "danDocumentationBody": "The main component of the localization solution we've implemented here is a 3rd party angular library called angular-translate. It has very good documentation (https://angular-translate.github.io/docs/#/guide & https://angular-translate.github.io/docs/#/api). The main services we use from the library are $translate and $translatePartialLoader. The main directive used is translate. It basically works by inserting 'translation Ids' on your angular templates or controllers and then matches those ids with localized values stored in Json files correpsonding to the various locales. This is the core of the library: one translation id on the template to many localized values in json files. The 3rd party files needed to build the library are stored in the directory ~/Scripts/bower_components/angular-translate/ and [allOfThat]/angular-translate-extensions. They are included in the Bundle Config and razored into the layouts at @Scripts.Render(\"~/bower/angular/angular-translate\"). This has to be preceded by the tag <script src=\"~/Scripts/sabio.module.ngtranslate.js\"></script>, which corresponds to a file where the dependency injection occurs that allows Angular to use angular-translate. There is an intermediate step in the angular build (included in the bundle) where angular-translate library is configured. That occurs occurs in the file ~/Scripts/i18n/view-localizations/. The configuration options are outlined in the library documentation, but I've included comments in that file which should point you in the right direction as to what functions they perform. There are several configuration options commented out in that file. Those are there in case you want to change the behavior of the library at some point in the future. For a step by step on how to internationalize and localize a particular view, there is a trello card with a detailed checklist. The following is just an overview. For each view, there will be a set of files it may need access to. These are loaded using a controller that uses the $translatePartialLoader service. For an example of this, see the file ~/Scripts/i18n/documentation/localization-loader.js. This loader script is dragged into the corresponding view. It is then instantiated on the template using the ng-controller directive. That directive needs to be placed at the top of the heirarchy to assure all elements on the page where you might add a translation id have access to it. Conventions for names are specified in the trello checklist. Once you have the ng-controller directive on the template there are numerous ways to place tags on the page. See the above C25 section for details. There's some important nuances to doing so, so make sure to read through all of that before diving in. Its important to note that an angular-translate translation id placed on the template makes no reference to the controller that loaded its corresponding translation ids. This means that good namespacing is crucial in the json files to avoid ambiguity in the translation ids between on different views. When you want to add or edit translations, use this angular-translate 4th party app, ngTranslateEditor http://bit.ly/2lk7UpZ. Just load up the localization file you are working from and the one you are changing. It will output a new Json file for you which you'll have to bring into VS and replace the current one with. There is an additional 4th party extension that uses gruntJS to extract all the tags from your files, but it seems to be redundant to the ngTranslateEditor and not hugely compatible with the partialLoader configuration we're using here. But if you want to take a look at it, it's here https://github.com/angular-translate/grunt-angular-translate. That's the deal for angular-translate. Hope it works well for you.",
      "danDocumentationHeading": "For Dan",
      "examples": {
        "attributeValue": "exampleClass",
        "someClass":  "yourClass",
        "controllers": "If you want the translation id for some piece of content to be set in the controller rather than on the template, you can do so in any controller as long as 1) there is a corresponding ng-controller directive on the template, 2) the translation id appears within the scope of that ng-controller directive. For example the translation id for this content, faqs.localization.examples.controllers, doesn't appear in the localization.cshtml file. The template includes the expression i18DocumentationExample.someProperty, and the corresponding controller contains a property 'someProperty', the value of which is set to faqs.localization.examples.controllers.",
        "crossSheetNamespacingOrigin": "@:stylesheet.crossSheetNamespacingResult",
        "directive": "This is an ngT directive with no attributes. It indicates that any interpolated content between the tags needs to be translated.",
        "directiveWithAttribute": "This ngT directive's attibute will be evaluated and added between this element's tags",
        "fallback": "This translation id only appears in the fallback language, which is currently set to English, so this string will always appear in English if English remains the fallback language.",
        "fallbackWarning": "",
        "filter": "This is a angular-translate (ngT) filter. It is more resource intensive than an ngT directive.",
        "list": [
          "cat",
          "dog",
          "rock"
        ],
        "listExposition": "You can also translate multiple values inside an ng-repeat that appear in a list, though it can be tricky because you have to be iterating over some other array with a length that matches the length of the array in your json localization file. In this case there is a key in the json file called list; its value is an array of length three. The ng-repeat is iterating over a seperate array which also has length three.",
        "localNamespacingOrigin": "@:documentation.localization.examples.localNamespacingResult",
        "localNamespacingResult": "The value of this translation id is a reference to another translation id in the same file. The value of that translation id is displayed here.",
        "noTagPrefixing": "You don't need to prefix your tags with the controller that loaded the files, but this means that keeping good namespacing in the json files is important.",
        "stylesheetExplanation": "We can also use this system to enforce style choices and change them quickly. By using a translation Id on this button instead of text, we can change the values of these buttons sightwide. Even if we want to add icons to them. Or take them away. Just saying. We could do that.",
        "title": "Internationalization (i18n) and Localization (l10n) Documentation",
        "translate id with spaces": "The ngT Id for this content has spaces in it but it still works.",
        "translateAttribute": "This element has an attribute value determined by angular translate.",
        "varReplacementByDirective": "The value for this translation id is written with a variable at the end. In the json file, the variable is enclosed in double curly brackets and its name is 'somevalue'. It's value is specified by the last word in a second directive, 'translate-value-[somevalue]'. It is important but inconvenient that the value of the variable written in the translate-value directive must be all lowercase and it must match tha value in the json file. The translate and translate-value directive do not necassarily have to appear in the same element. {{somevalue}}",
        "varReplacementByKeyValue": "This similarly has a variable in the json to replace, but in this case the directive is only 'translate-value' with an attribute value. The value of that attribute is a key/value pair enclosed in curly brackets. Supposedly this can be made to work for multiple replacements, but I haven't gotten that functionality to work. Actually this is kind of being buggy generally right now, so I'm going to skip it and move on. {{someothervalue}}",
        "varReplacementWithinTranslateFilter": "This is pretty much the same as the above two examples, except that the variable's value is defined in the filter. {{someThirdValue}}"
      },
      "procedure": [
        "In the \"/Scripts/i18n/view-localizations\" directory, add a new folder. Give it the same name as the view you've chosen.",
        "For each cshtml file the corresponding view folder, create a pair of json files. Give them the same names as the chshtml files, but add an \"-en-US\" suffix to one and \"-zh-CN\" to the other.",
        "Inside each file, create nested objects to make a namespace corresponding to the file's place and name in the directory structure.  See the \"view-localizations/faqs\" directory for examples.",
        "In the same folder, add a js file for your controller, name it \"[YourChosenView]-localization-loader\".",
        "In that new js file, write a controller which injects $translate and $translatePartialLoader. Given the controller the same name as the file, but camelcased instead of hypened and append \"Controller\" to it.",
        "In the body of the controller, call the .addPart method on the $translatePartialLoader service and pass it a string corresponding to one of the Json file in your view folder. The string should be formatted as \"/[yourViewFolder]/[JsonFileNameWithoutSuffix]\".  For example, $translatePartialLoader.addPart(\"documentation/localization\"). Repeat this method for each of the json files in your folder.",
        "Drag this script into each of your cshtml files.",
        "Add ng-controller directives to your cshtml templates, at the top of their hierarchy (e.g. <ng-controller> ng-controller=\"directiveName\"). Name the directive YourController as i18n[Your][ViewCshtml][FilenameLoad]'.",
        "(read the steps below before completing this step) Internationalize your template by hunting down any content which will needs to be localized on the fly. You don't have to do anything for user-generated content; they'll enter their content in the language they want to see it. Replace localized content with angular-translate ids, using angular-translate's directives and filters. There is good, fairly readable, documentation on the filters (http://bit.ly/2ly1LXx) and directives (http://bit.ly/2lxTljd). It is preferable to use directives rather than filters where you have a choice, because they impact performance less.  Avoid using one-time binding in interpolations that contain translation ids (e.g. {{ ::someTranslationId: translate}}, because one-time bindings won't update on the fly if the user changes their preferred language. The procedure for transferring this content to your Json files is outlined in the steps below.",
        "A) Replace some piece of content on your template with an angular-translate directive/filter and translation Id. Prepend \"data-\" to any translate directives or VS will give you green squiggly lines. By convention we should camelCasing for the translation Ids, but any string can serve as a translation Id, including ones with spaces. So if you have a lot of material to internationalize, you can probably get away with using the current string as both the translation Id and its English localization value. But any new content should definitely have camelCased translation Ids. Potentially this might affect some of your values stored in SQL. Also, if you have content that is part of {{some angular interpolation}}, it should still be possible to use a translation id there if you use the \"translate\" directive in the tag; the localization content should load before the rest of the interpolation occurs, though this may need to be fiddled with a bit to make it work.",
        "B) Add the translate id and localized content as a key/value pair in the English json file corresponding to the cshtml file you are working on.",
        "C) Don't add keys to the Chinese language files if you don't have Chinese localization values. An empty string in the Chinese language file would cause it not to fallback to the English value for that translation id.",
        "Repeat those last three steps for any other localized resources on the page. When you're finished, let Intellisense sort the content in your Json files.",
        "Check over the page to consider if there is any non-text localizations which might be necassary, though there probably won't be any.",
        "If you are working on a view where you know what views the client machine is likely to need next, consider caching the next views' json files in advance by adding their loader script at the very end of your current view's scripts. That sentence is perfectly clear, right?",
        "Pick a few translation ids and add dummy data in the zh-CN json files. Check to make sure they translate on your page when you click the language preference tab up at the top-left. Close your browser and reopen it to make sure your most recent language choice sticks. Then strip out the dummy data. Repeat until internationalized."
      ],
      "procedureHeading": "Localizing Views, Step-by-Step"
    }
  }
}